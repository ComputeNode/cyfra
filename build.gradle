plugins {

    // Apply the scala plugin to add support for Scala
    id 'scala'

    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'

    id 'org.hidetake.ssh' version '2.10.1'
//    id "io.freefair.lombok" version "8.6"
    id 'idea'
}
import org.gradle.internal.os.OperatingSystem

project.ext.lwjglVersion = "3.3.3"
project.ext.jomlVersion = "1.10.6"

switch (OperatingSystem.current()) {
    case OperatingSystem.LINUX:
        project.ext.lwjglNatives = "natives-linux"
        def osArch = System.getProperty("os.arch")
        if (osArch.startsWith("arm") || osArch.startsWith("aarch64")) {
            project.ext.lwjglNatives += osArch.contains("64") || osArch.startsWith("armv8") ? "-arm64" : "-arm32"
        } else if  (osArch.startsWith("ppc")) {
            project.ext.lwjglNatives += "-ppc64le"
        } else if  (osArch.startsWith("riscv")) {
            project.ext.lwjglNatives += "-riscv64"
        }
        break
    case OperatingSystem.MAC_OS:
        project.ext.lwjglNatives = System.getProperty("os.arch").startsWith("aarch64") ? "natives-macos-arm64" : "natives-macos"
        break
    case OperatingSystem.WINDOWS:
        def osArch = System.getProperty("os.arch")
        project.ext.lwjglNatives = osArch.contains("64")
                ? "natives-windows${osArch.startsWith("aarch64") ? "-arm64" : ""}"
                : "natives-windows-x86"
        break
}

repositories {
    jcenter()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}

apply plugin: 'java'

test {
    useJUnitPlatform()
    jvmArgs = ['-Xmx2048m']
}

ext {
    scalaMajorVersion = '3'
    scalaVersion = "$scalaMajorVersion.3.3"
}

dependencies {
    implementation "org.scala-lang:scala3-library_3:3.3.3"

    implementation 'dev.zio:izumi-reflect_3:2.3.10'
    implementation 'com.lihaoyi:pprint_3:0.9.0'
    implementation group: 'com.diogonunes', name: 'JColor', version: '5.5.1'


    implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")
    implementation "org.lwjgl:lwjgl"
    implementation "org.lwjgl:lwjgl-vulkan"
    implementation  "org.lwjgl:lwjgl-vma:"

    runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-vma::$lwjglNatives"
    if (lwjglNatives == "natives-macos" || lwjglNatives == "natives-macos-arm64") {
//        runtimeOnly "org.lwjgl:lwjgl-vulkan::$lwjglNatives"
    }

    implementation "org.joml:joml:${jomlVersion}"
    implementation group: 'commons-io', name: 'commons-io', version: '2.16.1'
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.30'
    testImplementation group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.30'

    testImplementation group: 'org.scalameta', name: 'munit_3', version: '1.0.0'
    testImplementation('org.junit.jupiter:junit-jupiter:5.6.2')

    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.7.2')

}

tasks.withType(JavaExec) {
    systemProperty "org.lwjgl.vulkan.libname", "${System.getenv("VULKAN_SDK")}/lib/libvulkan.1.dylib"
}

test {
    systemProperty "org.lwjgl.vulkan.libname", "${System.getenv("VULKAN_SDK")}/lib/libvulkan.1.dylib"
}


scala {
    zincVersion = '1.10.0'
}