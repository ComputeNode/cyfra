package com.unihogsoft.scalag.compiler

import java.nio.charset.StandardCharsets

object Opcodes {


  def intToBytes(i: Int): List[Byte] = {
    List[Byte](
      (i >>> 24).asInstanceOf[Byte],
      (i >>> 16).asInstanceOf[Byte],
      (i >>> 8).asInstanceOf[Byte],
      (i >>> 0).asInstanceOf[Byte]
    )
  }

  trait Words {
    def toWords: List[Byte]

    def length: Int
  }

  case class Word(bytes: Array[Byte]) extends Words {
    def toWords: List[Byte] = bytes.toList

    def length = 1
  }

  case class WordVariable(name: String) extends Words {
    def toWords: List[Byte] = {
      List(-1, -1, -1, -1)
    }

    def length = 1
  }


  case class Instruction(code: Code, operands: List[Words]) extends Words {
    override def toWords: List[Byte] =
      code.toWords.take(2) :::
        intToBytes(length).reverse.take(2) :::
        operands.flatMap(_.toWords)

    def length = 1 + operands.map(_.length).sum

    def replaceVar(name: String, value: Int): Instruction = {
      this.copy(operands = operands.map {
        case WordVariable(varName) if name == varName => IntWord(value)
        case any => any
      })
    }
  }

  case class Code(mnemo: String, opcode: Int) extends Words {
    override def toWords: List[Byte] = intToBytes(opcode).reverse

    override def length: Int = 1
  }

  case class Text(text: String) extends Words {
    override def toWords: List[Byte] = {
      val textBytes = text.getBytes(StandardCharsets.UTF_8).toList
      val complBytesLength = 4 - (textBytes.length % 4)
      val complBytes = List.fill[Byte](complBytesLength)(0)
      textBytes ::: complBytes
    }

    override def length: Int = toWords.length / 4
  }

  case class IntWord(i: Int) extends Words {
    override def toWords: List[Byte] = intToBytes(i).reverse

    override def length: Int = 1
  }

  case class ResultRef(result: Int) extends Words {
    override def toWords: List[Byte] = intToBytes(result).reverse

    override def length: Int = 1
  }


  val MagicNumber = Code("MagicNumber", 0x07230203)
  val Version = Code("Version", 0x00010000)
  val Revision = Code("Revision", 8)
  val Generator = Code("Generator", 0)
  val OpCodeMask = Code("OpCodeMask", 0xffff)
  val WordCountShift = Code("WordCountShift", 16)

  object SourceLanguage {
    val Unknown = Code("Unknown", 0)
    val ESSL = Code("ESSL", 1)
    val GLSL = Code("GLSL", 2)
    val OpenCL_C = Code("OpenCL_C", 3)
    val OpenCL_CPP = Code("OpenCL_CPP", 4)
    val HLSL = Code("HLSL", 5)
  }

  object ExecutionModel {
    val Vertex = Code("Vertex", 0)
    val TessellationControl = Code("TessellationControl", 1)
    val TessellationEvaluation = Code("TessellationEvaluation", 2)
    val Geometry = Code("Geometry", 3)
    val Fragment = Code("Fragment", 4)
    val GLCompute = Code("GLCompute", 5)
    val Kernel = Code("Kernel", 6)
  }

  object AddressingModel {
    val Logical = Code("Logical", 0)
    val Physical32 = Code("Physical32", 1)
    val Physical64 = Code("Physical64", 2)
  }

  object MemoryModel {
    val Simple = Code("Simple", 0)
    val GLSL450 = Code("GLSL450", 1)
    val OpenCL = Code("OpenCL", 2)
  }

  object ExecutionMode {
    val Invocations = Code("Invocations", 0)
    val SpacingEqual = Code("SpacingEqual", 1)
    val SpacingFractionalEven = Code("SpacingFractionalEven", 2)
    val SpacingFractionalOdd = Code("SpacingFractionalOdd", 3)
    val VertexOrderCw = Code("VertexOrderCw", 4)
    val VertexOrderCcw = Code("VertexOrderCcw", 5)
    val PixelCenterInteger = Code("PixelCenterInteger", 6)
    val OriginUpperLeft = Code("OriginUpperLeft", 7)
    val OriginLowerLeft = Code("OriginLowerLeft", 8)
    val EarlyFragmentTests = Code("EarlyFragmentTests", 9)
    val PointMode = Code("PointMode", 10)
    val Xfb = Code("Xfb", 11)
    val DepthReplacing = Code("DepthReplacing", 12)
    val DepthGreater = Code("DepthGreater", 14)
    val DepthLess = Code("DepthLess", 15)
    val DepthUnchanged = Code("DepthUnchanged", 16)
    val LocalSize = Code("LocalSize", 17)
    val LocalSizeHint = Code("LocalSizeHint", 18)
    val InputPoints = Code("InputPoints", 19)
    val InputLines = Code("InputLines", 20)
    val InputLinesAdjacency = Code("InputLinesAdjacency", 21)
    val Triangles = Code("Triangles", 22)
    val InputTrianglesAdjacency = Code("InputTrianglesAdjacency", 23)
    val Quads = Code("Quads", 24)
    val Isolines = Code("Isolines", 25)
    val OutputVertices = Code("OutputVertices", 26)
    val OutputPoints = Code("OutputPoints", 27)
    val OutputLineStrip = Code("OutputLineStrip", 28)
    val OutputTriangleStrip = Code("OutputTriangleStrip", 29)
    val VecTypeHint = Code("VecTypeHint", 30)
    val ContractionOff = Code("ContractionOff", 31)
    val Initializer = Code("Initializer", 33)
    val Finalizer = Code("Finalizer", 34)
    val SubgroupSize = Code("SubgroupSize", 35)
    val SubgroupsPerWorkgroup = Code("SubgroupsPerWorkgroup", 36)
    val PostDepthCoverage = Code("PostDepthCoverage", 4446)
    val StencilRefReplacingEXT = Code("StencilRefReplacingEXT", 5027)
  }

  object StorageClass {
    val UniformConstant = Code("UniformConstant", 0)
    val Input = Code("Input", 1)
    val Uniform = Code("Uniform", 2)
    val Output = Code("Output", 3)
    val Workgroup = Code("Workgroup", 4)
    val CrossWorkgroup = Code("CrossWorkgroup", 5)
    val Private = Code("Private", 6)
    val Function = Code("Function", 7)
    val Generic = Code("Generic", 8)
    val PushConstant = Code("PushConstant", 9)
    val AtomicCounter = Code("AtomicCounter", 10)
    val Image = Code("Image", 11)
    val StorageBuffer = Code("StorageBuffer", 12)
  }

  object Dim {
    val Dim1D = Code("Dim1D", 0)
    val Dim2D = Code("Dim2D", 1)
    val Dim3D = Code("Dim3D", 2)
    val Cube = Code("Cube", 3)
    val Rect = Code("Rect", 4)
    val Buffer = Code("Buffer", 5)
    val SubpassData = Code("SubpassData", 6)
  }

  object SamplerAddressingMode {
    val None = Code("None", 0)
    val ClampToEdge = Code("ClampToEdge", 1)
    val Clamp = Code("Clamp", 2)
    val Repeat = Code("Repeat", 3)
    val RepeatMirrored = Code("RepeatMirrored", 4)
  }

  object SamplerFilterMode {
    val Nearest = Code("Nearest", 0)
    val Linear = Code("Linear", 1)
  }

  object ImageFormat {
    val Unknown = Code("Unknown", 0)
    val Rgba32f = Code("Rgba32f", 1)
    val Rgba16f = Code("Rgba16f", 2)
    val R32f = Code("R32f", 3)
    val Rgba8 = Code("Rgba8", 4)
    val Rgba8Snorm = Code("Rgba8Snorm", 5)
    val Rg32f = Code("Rg32f", 6)
    val Rg16f = Code("Rg16f", 7)
    val R11fG11fB10f = Code("R11fG11fB10f", 8)
    val R16f = Code("R16f", 9)
    val Rgba16 = Code("Rgba16", 10)
    val Rgb10A2 = Code("Rgb10A2", 11)
    val Rg16 = Code("Rg16", 12)
    val Rg8 = Code("Rg8", 13)
    val R16 = Code("R16", 14)
    val R8 = Code("R8", 15)
    val Rgba16Snorm = Code("Rgba16Snorm", 16)
    val Rg16Snorm = Code("Rg16Snorm", 17)
    val Rg8Snorm = Code("Rg8Snorm", 18)
    val R16Snorm = Code("R16Snorm", 19)
    val R8Snorm = Code("R8Snorm", 20)
    val Rgba32i = Code("Rgba32i", 21)
    val Rgba16i = Code("Rgba16i", 22)
    val Rgba8i = Code("Rgba8i", 23)
    val R32i = Code("R32i", 24)
    val Rg32i = Code("Rg32i", 25)
    val Rg16i = Code("Rg16i", 26)
    val Rg8i = Code("Rg8i", 27)
    val R16i = Code("R16i", 28)
    val R8i = Code("R8i", 29)
    val Rgba32ui = Code("Rgba32ui", 30)
    val Rgba16ui = Code("Rgba16ui", 31)
    val Rgba8ui = Code("Rgba8ui", 32)
    val R32ui = Code("R32ui", 33)
    val Rgb10a2ui = Code("Rgb10a2ui", 34)
    val Rg32ui = Code("Rg32ui", 35)
    val Rg16ui = Code("Rg16ui", 36)
    val Rg8ui = Code("Rg8ui", 37)
    val R16ui = Code("R16ui", 38)
    val R8ui = Code("R8ui", 39)
  }

  object ImageChannelOrder {
    val R = Code("R", 0)
    val A = Code("A", 1)
    val RG = Code("RG", 2)
    val RA = Code("RA", 3)
    val RGB = Code("RGB", 4)
    val RGBA = Code("RGBA", 5)
    val BGRA = Code("BGRA", 6)
    val ARGB = Code("ARGB", 7)
    val Intensity = Code("Intensity", 8)
    val Luminance = Code("Luminance", 9)
    val Rx = Code("Rx", 10)
    val RGx = Code("RGx", 11)
    val RGBx = Code("RGBx", 12)
    val Depth = Code("Depth", 13)
    val DepthStencil = Code("DepthStencil", 14)
    val sRGB = Code("sRGB", 15)
    val sRGBx = Code("sRGBx", 16)
    val sRGBA = Code("sRGBA", 17)
    val sBGRA = Code("sBGRA", 18)
    val ABGR = Code("ABGR", 19)
  }

  object ImageChannelDataType {
    val SnormInt8 = Code("SnormInt8", 0)
    val SnormInt16 = Code("SnormInt16", 1)
    val UnormInt8 = Code("UnormInt8", 2)
    val UnormInt16 = Code("UnormInt16", 3)
    val UnormShort565 = Code("UnormShort565", 4)
    val UnormShort555 = Code("UnormShort555", 5)
    val UnormInt101010 = Code("UnormInt101010", 6)
    val SignedInt8 = Code("SignedInt8", 7)
    val SignedInt16 = Code("SignedInt16", 8)
    val SignedInt32 = Code("SignedInt32", 9)
    val UnsignedInt8 = Code("UnsignedInt8", 10)
    val UnsignedInt16 = Code("UnsignedInt16", 11)
    val UnsignedInt32 = Code("UnsignedInt32", 12)
    val HalfFloat = Code("HalfFloat", 13)
    val Float = Code("Float", 14)
    val UnormInt24 = Code("UnormInt24", 15)
    val UnormInt101010_2 = Code("UnormInt101010_2", 16)
  }

  object ImageOperandsShift {
    val Bias = Code("Bias", 0)
    val Lod = Code("Lod", 1)
    val Grad = Code("Grad", 2)
    val ConstOffset = Code("ConstOffset", 3)
    val Offset = Code("Offset", 4)
    val ConstOffsets = Code("ConstOffsets", 5)
    val Sample = Code("Sample", 6)
    val MinLod = Code("MinLod", 7)
  }

  object ImageOperandsMask {
    val MaskNone = Code("MaskNone", 0)
    val Bias = Code("Bias", 0x00000001)
    val Lod = Code("Lod", 0x00000002)
    val Grad = Code("Grad", 0x00000004)
    val ConstOffset = Code("ConstOffset", 0x00000008)
    val Offset = Code("Offset", 0x00000010)
    val ConstOffsets = Code("ConstOffsets", 0x00000020)
    val Sample = Code("Sample", 0x00000040)
    val MinLod = Code("MinLod", 0x00000080)
  }

  object FPFastMathModeShift {
    val NotNaN = Code("NotNaN", 0)
    val NotInf = Code("NotInf", 1)
    val NSZ = Code("NSZ", 2)
    val AllowRecip = Code("AllowRecip", 3)
    val Fast = Code("Fast", 4)
  }

  object FPFastMathModeMask {
    val MaskNone = Code("MaskNone", 0)
    val NotNaN = Code("NotNaN", 0x00000001)
    val NotInf = Code("NotInf", 0x00000002)
    val NSZ = Code("NSZ", 0x00000004)
    val AllowRecip = Code("AllowRecip", 0x00000008)
    val Fast = Code("Fast", 0x00000010)
  }

  object FPRoundingMode {
    val RTE = Code("RTE", 0)
    val RTZ = Code("RTZ", 1)
    val RTP = Code("RTP", 2)
    val RTN = Code("RTN", 3)
  }

  object LinkageType {
    val Export = Code("Export", 0)
    val Import = Code("Import", 1)
  }

  object AccessQualifier {
    val ReadOnly = Code("ReadOnly", 0)
    val WriteOnly = Code("WriteOnly", 1)
    val ReadWrite = Code("ReadWrite", 2)
  }

  object FunctionParameterAttribute {
    val Zext = Code("Zext", 0)
    val Sext = Code("Sext", 1)
    val ByVal = Code("ByVal", 2)
    val Sret = Code("Sret", 3)
    val NoAlias = Code("NoAlias", 4)
    val NoCapture = Code("NoCapture", 5)
    val NoWrite = Code("NoWrite", 6)
    val NoReadWrite = Code("NoReadWrite", 7)
  }

  object Decoration {
    val RelaxedPrecision = Code("RelaxedPrecision", 0)
    val SpecId = Code("SpecId", 1)
    val Block = Code("Block", 2)
    val BufferBlock = Code("BufferBlock", 3)
    val RowMajor = Code("RowMajor", 4)
    val ColMajor = Code("ColMajor", 5)
    val ArrayStride = Code("ArrayStride", 6)
    val MatrixStride = Code("MatrixStride", 7)
    val GLSLShared = Code("GLSLShared", 8)
    val GLSLPacked = Code("GLSLPacked", 9)
    val CPacked = Code("CPacked", 10)
    val BuiltIn = Code("BuiltIn", 11)
    val NoPerspective = Code("NoPerspective", 13)
    val Flat = Code("Flat", 14)
    val Patch = Code("Patch", 15)
    val Centroid = Code("Centroid", 16)
    val Sample = Code("Sample", 17)
    val Invariant = Code("Invariant", 18)
    val Restrict = Code("Restrict", 19)
    val Aliased = Code("Aliased", 20)
    val Volatile = Code("Volatile", 21)
    val Constant = Code("Constant", 22)
    val Coherent = Code("Coherent", 23)
    val NonWritable = Code("NonWritable", 24)
    val NonReadable = Code("NonReadable", 25)
    val Uniform = Code("Uniform", 26)
    val SaturatedConversion = Code("SaturatedConversion", 28)
    val Stream = Code("Stream", 29)
    val Location = Code("Location", 30)
    val Component = Code("Component", 31)
    val Index = Code("Index", 32)
    val Binding = Code("Binding", 33)
    val DescriptorSet = Code("DescriptorSet", 34)
    val Offset = Code("Offset", 35)
    val XfbBuffer = Code("XfbBuffer", 36)
    val XfbStride = Code("XfbStride", 37)
    val FuncParamAttr = Code("FuncParamAttr", 38)
    val FPRoundingMode = Code("FPRoundingMode", 39)
    val FPFastMathMode = Code("FPFastMathMode", 40)
    val LinkageAttributes = Code("LinkageAttributes", 41)
    val NoContraction = Code("NoContraction", 42)
    val InputAttachmentIndex = Code("InputAttachmentIndex", 43)
    val Alignment = Code("Alignment", 44)
    val MaxByteOffset = Code("MaxByteOffset", 45)
    val ExplicitInterpAMD = Code("ExplicitInterpAMD", 4999)
    val OverrideCoverageNV = Code("OverrideCoverageNV", 5248)
    val PassthroughNV = Code("PassthroughNV", 5250)
    val ViewportRelativeNV = Code("ViewportRelativeNV", 5252)
    val SecondaryViewportRelativeNV = Code("SecondaryViewportRelativeNV", 5256)
  }

  object BuiltIn {
    val Position = Code("Position", 0)
    val PointSize = Code("PointSize", 1)
    val ClipDistance = Code("ClipDistance", 3)
    val CullDistance = Code("CullDistance", 4)
    val VertexId = Code("VertexId", 5)
    val InstanceId = Code("InstanceId", 6)
    val PrimitiveId = Code("PrimitiveId", 7)
    val InvocationId = Code("InvocationId", 8)
    val Layer = Code("Layer", 9)
    val ViewportIndex = Code("ViewportIndex", 10)
    val TessLevelOuter = Code("TessLevelOuter", 11)
    val TessLevelInner = Code("TessLevelInner", 12)
    val TessCoord = Code("TessCoord", 13)
    val PatchVertices = Code("PatchVertices", 14)
    val FragCoord = Code("FragCoord", 15)
    val PointCoord = Code("PointCoord", 16)
    val FrontFacing = Code("FrontFacing", 17)
    val SampleId = Code("SampleId", 18)
    val SamplePosition = Code("SamplePosition", 19)
    val SampleMask = Code("SampleMask", 20)
    val FragDepth = Code("FragDepth", 22)
    val HelperInvocation = Code("HelperInvocation", 23)
    val NumWorkgroups = Code("NumWorkgroups", 24)
    val WorkgroupSize = Code("WorkgroupSize", 25)
    val WorkgroupId = Code("WorkgroupId", 26)
    val LocalInvocationId = Code("LocalInvocationId", 27)
    val GlobalInvocationId = Code("GlobalInvocationId", 28)
    val LocalInvocationIndex = Code("LocalInvocationIndex", 29)
    val WorkDim = Code("WorkDim", 30)
    val GlobalSize = Code("GlobalSize", 31)
    val EnqueuedWorkgroupSize = Code("EnqueuedWorkgroupSize", 32)
    val GlobalOffset = Code("GlobalOffset", 33)
    val GlobalLinearId = Code("GlobalLinearId", 34)
    val SubgroupSize = Code("SubgroupSize", 36)
    val SubgroupMaxSize = Code("SubgroupMaxSize", 37)
    val NumSubgroups = Code("NumSubgroups", 38)
    val NumEnqueuedSubgroups = Code("NumEnqueuedSubgroups", 39)
    val SubgroupId = Code("SubgroupId", 40)
    val SubgroupLocalInvocationId = Code("SubgroupLocalInvocationId", 41)
    val VertexIndex = Code("VertexIndex", 42)
    val InstanceIndex = Code("InstanceIndex", 43)
    val SubgroupEqMaskKHR = Code("SubgroupEqMaskKHR", 4416)
    val SubgroupGeMaskKHR = Code("SubgroupGeMaskKHR", 4417)
    val SubgroupGtMaskKHR = Code("SubgroupGtMaskKHR", 4418)
    val SubgroupLeMaskKHR = Code("SubgroupLeMaskKHR", 4419)
    val SubgroupLtMaskKHR = Code("SubgroupLtMaskKHR", 4420)
    val BaseVertex = Code("BaseVertex", 4424)
    val BaseInstance = Code("BaseInstance", 4425)
    val DrawIndex = Code("DrawIndex", 4426)
    val DeviceIndex = Code("DeviceIndex", 4438)
    val ViewIndex = Code("ViewIndex", 4440)
    val BaryCoordNoPerspAMD = Code("BaryCoordNoPerspAMD", 4992)
    val BaryCoordNoPerspCentroidAMD = Code("BaryCoordNoPerspCentroidAMD", 4993)
    val BaryCoordNoPerspSampleAMD = Code("BaryCoordNoPerspSampleAMD", 4994)
    val BaryCoordSmoothAMD = Code("BaryCoordSmoothAMD", 4995)
    val BaryCoordSmoothCentroidAMD = Code("BaryCoordSmoothCentroidAMD", 4996)
    val BaryCoordSmoothSampleAMD = Code("BaryCoordSmoothSampleAMD", 4997)
    val BaryCoordPullModelAMD = Code("BaryCoordPullModelAMD", 4998)
    val FragStencilRefEXT = Code("FragStencilRefEXT", 5014)
    val ViewportMaskNV = Code("ViewportMaskNV", 5253)
    val SecondaryPositionNV = Code("SecondaryPositionNV", 5257)
    val SecondaryViewportMaskNV = Code("SecondaryViewportMaskNV", 5258)
    val PositionPerViewNV = Code("PositionPerViewNV", 5261)
    val ViewportMaskPerViewNV = Code("ViewportMaskPerViewNV", 5262)
  }

  object SelectionControlShift {
    val Flatten = Code("Flatten", 0)
    val DontFlatten = Code("DontFlatten", 1)
  }

  object SelectionControlMask {
    val MaskNone = Code("MaskNone", 0)
    val Flatten = Code("Flatten", 0x00000001)
    val DontFlatten = Code("DontFlatten", 0x00000002)
  }

  object LoopControlShift {
    val Unroll = Code("Unroll", 0)
    val DontUnroll = Code("DontUnroll", 1)
    val DependencyInfinite = Code("DependencyInfinite", 2)
    val DependencyLength = Code("DependencyLength", 3)
  }

  object LoopControlMask {
    val MaskNone = Code("MaskNone", 0)
    val Unroll = Code("Unroll", 0x00000001)
    val DontUnroll = Code("DontUnroll", 0x00000002)
    val DependencyInfinite = Code("DependencyInfinite", 0x00000004)
    val DependencyLength = Code("DependencyLength", 0x00000008)
  }

  object FunctionControlShift {
    val Inline = Code("Inline", 0)
    val DontInline = Code("DontInline", 1)
    val Pure = Code("Pure", 2)
    val Const = Code("Const", 3)
  }

  object FunctionControlMask {
    val MaskNone = Code("MaskNone", 0)
    val Inline = Code("Inline", 0x00000001)
    val DontInline = Code("DontInline", 0x00000002)
    val Pure = Code("Pure", 0x00000004)
    val Const = Code("Const", 0x00000008)
  }

  object MemorySemanticsShift {
    val Acquire = Code("Acquire", 1)
    val Release = Code("Release", 2)
    val AcquireRelease = Code("AcquireRelease", 3)
    val SequentiallyConsistent = Code("SequentiallyConsistent", 4)
    val UniformMemory = Code("UniformMemory", 6)
    val SubgroupMemory = Code("SubgroupMemory", 7)
    val WorkgroupMemory = Code("WorkgroupMemory", 8)
    val CrossWorkgroupMemory = Code("CrossWorkgroupMemory", 9)
    val AtomicCounterMemory = Code("AtomicCounterMemory", 10)
    val ImageMemory = Code("ImageMemory", 11)
  }

  object MemorySemanticsMask {
    val MaskNone = Code("MaskNone", 0)
    val Acquire = Code("Acquire", 0x00000002)
    val Release = Code("Release", 0x00000004)
    val AcquireRelease = Code("AcquireRelease", 0x00000008)
    val SequentiallyConsistent = Code("SequentiallyConsistent", 0x00000010)
    val UniformMemory = Code("UniformMemory", 0x00000040)
    val SubgroupMemory = Code("SubgroupMemory", 0x00000080)
    val WorkgroupMemory = Code("WorkgroupMemory", 0x00000100)
    val CrossWorkgroupMemory = Code("CrossWorkgroupMemory", 0x00000200)
    val AtomicCounterMemory = Code("AtomicCounterMemory", 0x00000400)
    val ImageMemory = Code("ImageMemory", 0x00000800)
  }

  object MemoryAccessShift {
    val Volatile = Code("Volatile", 0)
    val Aligned = Code("Aligned", 1)
    val Nontemporal = Code("Nontemporal", 2)
  }

  object MemoryAccessMask {
    val MaskNone = Code("MaskNone", 0)
    val Volatile = Code("Volatile", 0x00000001)
    val Aligned = Code("Aligned", 0x00000002)
    val Nontemporal = Code("Nontemporal", 0x00000004)
  }

  object Scope {
    val CrossDevice = Code("CrossDevice", 0)
    val Device = Code("Device", 1)
    val Workgroup = Code("Workgroup", 2)
    val Subgroup = Code("Subgroup", 3)
    val Invocation = Code("Invocation", 4)
  }

  object GroupOperation {
    val Reduce = Code("Reduce", 0)
    val InclusiveScan = Code("InclusiveScan", 1)
    val ExclusiveScan = Code("ExclusiveScan", 2)
  }

  object KernelEnqueueFlags {
    val NoWait = Code("NoWait", 0)
    val WaitKernel = Code("WaitKernel", 1)
    val WaitWorkGroup = Code("WaitWorkGroup", 2)
  }

  object KernelProfilingInfoShift {
    val CmdExecTime = Code("CmdExecTime", 0)
  }

  object KernelProfilingInfoMask {
    val MaskNone = Code("MaskNone", 0)
    val CmdExecTime = Code("CmdExecTime", 0x00000001)
  }

  object Capability {
    val Matrix = Code("Matrix", 0)
    val Shader = Code("Shader", 1)
    val Geometry = Code("Geometry", 2)
    val Tessellation = Code("Tessellation", 3)
    val Addresses = Code("Addresses", 4)
    val Linkage = Code("Linkage", 5)
    val Kernel = Code("Kernel", 6)
    val Vector16 = Code("Vector16", 7)
    val Float16Buffer = Code("Float16Buffer", 8)
    val Float16 = Code("Float16", 9)
    val Float64 = Code("Float64", 10)
    val Int64 = Code("Int64", 11)
    val Int64Atomics = Code("Int64Atomics", 12)
    val ImageBasic = Code("ImageBasic", 13)
    val ImageReadWrite = Code("ImageReadWrite", 14)
    val ImageMipmap = Code("ImageMipmap", 15)
    val Pipes = Code("Pipes", 17)
    val Groups = Code("Groups", 18)
    val DeviceEnqueue = Code("DeviceEnqueue", 19)
    val LiteralSampler = Code("LiteralSampler", 20)
    val AtomicStorage = Code("AtomicStorage", 21)
    val Int16 = Code("Int16", 22)
    val TessellationPointSize = Code("TessellationPointSize", 23)
    val GeometryPointSize = Code("GeometryPointSize", 24)
    val ImageGatherExtended = Code("ImageGatherExtended", 25)
    val StorageImageMultisample = Code("StorageImageMultisample", 27)
    val UniformBufferArrayDynamicIndexing = Code("UniformBufferArrayDynamicIndexing", 28)
    val SampledImageArrayDynamicIndexing = Code("SampledImageArrayDynamicIndexing", 29)
    val StorageBufferArrayDynamicIndexing = Code("StorageBufferArrayDynamicIndexing", 30)
    val StorageImageArrayDynamicIndexing = Code("StorageImageArrayDynamicIndexing", 31)
    val ClipDistance = Code("ClipDistance", 32)
    val CullDistance = Code("CullDistance", 33)
    val ImageCubeArray = Code("ImageCubeArray", 34)
    val SampleRateShading = Code("SampleRateShading", 35)
    val ImageRect = Code("ImageRect", 36)
    val SampledRect = Code("SampledRect", 37)
    val GenericPointer = Code("GenericPointer", 38)
    val Int8 = Code("Int8", 39)
    val InputAttachment = Code("InputAttachment", 40)
    val SparseResidency = Code("SparseResidency", 41)
    val MinLod = Code("MinLod", 42)
    val Sampled1D = Code("Sampled1D", 43)
    val Image1D = Code("Image1D", 44)
    val SampledCubeArray = Code("SampledCubeArray", 45)
    val SampledBuffer = Code("SampledBuffer", 46)
    val ImageBuffer = Code("ImageBuffer", 47)
    val ImageMSArray = Code("ImageMSArray", 48)
    val StorageImageExtendedFormats = Code("StorageImageExtendedFormats", 49)
    val ImageQuery = Code("ImageQuery", 50)
    val DerivativeControl = Code("DerivativeControl", 51)
    val InterpolationFunction = Code("InterpolationFunction", 52)
    val TransformFeedback = Code("TransformFeedback", 53)
    val GeometryStreams = Code("GeometryStreams", 54)
    val StorageImageReadWithoutFormat = Code("StorageImageReadWithoutFormat", 55)
    val StorageImageWriteWithoutFormat = Code("StorageImageWriteWithoutFormat", 56)
    val MultiViewport = Code("MultiViewport", 57)
    val SubgroupDispatch = Code("SubgroupDispatch", 58)
    val NamedBarrier = Code("NamedBarrier", 59)
    val PipeStorage = Code("PipeStorage", 60)
    val SubgroupBallotKHR = Code("SubgroupBallotKHR", 4423)
    val DrawParameters = Code("DrawParameters", 4427)
    val SubgroupVoteKHR = Code("SubgroupVoteKHR", 4431)
    val StorageBuffer16BitAccess = Code("StorageBuffer16BitAccess", 4433)
    val StorageUniformBufferBlock16 = Code("StorageUniformBufferBlock16", 4433)
    val StorageUniform16 = Code("StorageUniform16", 4434)
    val UniformAndStorageBuffer16BitAccess = Code("UniformAndStorageBuffer16BitAccess", 4434)
    val StoragePushConstant16 = Code("StoragePushConstant16", 4435)
    val StorageInputOutput16 = Code("StorageInputOutput16", 4436)
    val DeviceGroup = Code("DeviceGroup", 4437)
    val MultiView = Code("MultiView", 4439)
    val VariablePointersStorageBuffer = Code("VariablePointersStorageBuffer", 4441)
    val VariablePointers = Code("VariablePointers", 4442)
    val AtomicStorageOps = Code("AtomicStorageOps", 4445)
    val SampleMaskPostDepthCoverage = Code("SampleMaskPostDepthCoverage", 4447)
    val ImageGatherBiasLodAMD = Code("ImageGatherBiasLodAMD", 5009)
    val FragmentMaskAMD = Code("FragmentMaskAMD", 5010)
    val StencilExportEXT = Code("StencilExportEXT", 5013)
    val ImageReadWriteLodAMD = Code("ImageReadWriteLodAMD", 5015)
    val SampleMaskOverrideCoverageNV = Code("SampleMaskOverrideCoverageNV", 5249)
    val GeometryShaderPassthroughNV = Code("GeometryShaderPassthroughNV", 5251)
    val ShaderViewportIndexLayerEXT = Code("ShaderViewportIndexLayerEXT", 5254)
    val ShaderViewportIndexLayerNV = Code("ShaderViewportIndexLayerNV", 5254)
    val ShaderViewportMaskNV = Code("ShaderViewportMaskNV", 5255)
    val ShaderStereoViewNV = Code("ShaderStereoViewNV", 5259)
    val PerViewAttributesNV = Code("PerViewAttributesNV", 5260)
    val SubgroupShuffleINTEL = Code("SubgroupShuffleINTEL", 5568)
    val SubgroupBufferBlockIOINTEL = Code("SubgroupBufferBlockIOINTEL", 5569)
    val SubgroupImageBlockIOINTEL = Code("SubgroupImageBlockIOINTEL", 5570)
  }

  object Op {
    val OpNop = Code("OpNop", 0)
    val OpUndef = Code("OpUndef", 1)
    val OpSourceContinued = Code("OpSourceContinued", 2)
    val OpSource = Code("OpSource", 3)
    val OpSourceExtension = Code("OpSourceExtension", 4)
    val OpName = Code("OpName", 5)
    val OpMemberName = Code("OpMemberName", 6)
    val OpString = Code("OpString", 7)
    val OpLine = Code("OpLine", 8)
    val OpExtension = Code("OpExtension", 10)
    val OpExtInstImport = Code("OpExtInstImport", 11)
    val OpExtInst = Code("OpExtInst", 12)
    val OpMemoryModel = Code("OpMemoryModel", 14)
    val OpEntryPoint = Code("OpEntryPoint", 15)
    val OpExecutionMode = Code("OpExecutionMode", 16)
    val OpCapability = Code("OpCapability", 17)
    val OpTypeVoid = Code("OpTypeVoid", 19)
    val OpTypeBool = Code("OpTypeBool", 20)
    val OpTypeInt = Code("OpTypeInt", 21)
    val OpTypeFloat = Code("OpTypeFloat", 22)
    val OpTypeVector = Code("OpTypeVector", 23)
    val OpTypeMatrix = Code("OpTypeMatrix", 24)
    val OpTypeImage = Code("OpTypeImage", 25)
    val OpTypeSampler = Code("OpTypeSampler", 26)
    val OpTypeSampledImage = Code("OpTypeSampledImage", 27)
    val OpTypeArray = Code("OpTypeArray", 28)
    val OpTypeRuntimeArray = Code("OpTypeRuntimeArray", 29)
    val OpTypeStruct = Code("OpTypeStruct", 30)
    val OpTypeOpaque = Code("OpTypeOpaque", 31)
    val OpTypePointer = Code("OpTypePointer", 32)
    val OpTypeFunction = Code("OpTypeFunction", 33)
    val OpTypeEvent = Code("OpTypeEvent", 34)
    val OpTypeDeviceEvent = Code("OpTypeDeviceEvent", 35)
    val OpTypeReserveId = Code("OpTypeReserveId", 36)
    val OpTypeQueue = Code("OpTypeQueue", 37)
    val OpTypePipe = Code("OpTypePipe", 38)
    val OpTypeForwardPointer = Code("OpTypeForwardPointer", 39)
    val OpConstantTrue = Code("OpConstantTrue", 41)
    val OpConstantFalse = Code("OpConstantFalse", 42)
    val OpConstant = Code("OpConstant", 43)
    val OpConstantComposite = Code("OpConstantComposite", 44)
    val OpConstantSampler = Code("OpConstantSampler", 45)
    val OpConstantNull = Code("OpConstantNull", 46)
    val OpSpecConstantTrue = Code("OpSpecConstantTrue", 48)
    val OpSpecConstantFalse = Code("OpSpecConstantFalse", 49)
    val OpSpecConstant = Code("OpSpecConstant", 50)
    val OpSpecConstantComposite = Code("OpSpecConstantComposite", 51)
    val OpSpecConstantOp = Code("OpSpecConstantOp", 52)
    val OpFunction = Code("OpFunction", 54)
    val OpFunctionParameter = Code("OpFunctionParameter", 55)
    val OpFunctionEnd = Code("OpFunctionEnd", 56)
    val OpFunctionCall = Code("OpFunctionCall", 57)
    val OpVariable = Code("OpVariable", 59)
    val OpImageTexelPointer = Code("OpImageTexelPointer", 60)
    val OpLoad = Code("OpLoad", 61)
    val OpStore = Code("OpStore", 62)
    val OpCopyMemory = Code("OpCopyMemory", 63)
    val OpCopyMemorySized = Code("OpCopyMemorySized", 64)
    val OpAccessChain = Code("OpAccessChain", 65)
    val OpInBoundsAccessChain = Code("OpInBoundsAccessChain", 66)
    val OpPtrAccessChain = Code("OpPtrAccessChain", 67)
    val OpArrayLength = Code("OpArrayLength", 68)
    val OpGenericPtrMemSemantics = Code("OpGenericPtrMemSemantics", 69)
    val OpInBoundsPtrAccessChain = Code("OpInBoundsPtrAccessChain", 70)
    val OpDecorate = Code("OpDecorate", 71)
    val OpMemberDecorate = Code("OpMemberDecorate", 72)
    val OpDecorationGroup = Code("OpDecorationGroup", 73)
    val OpGroupDecorate = Code("OpGroupDecorate", 74)
    val OpGroupMemberDecorate = Code("OpGroupMemberDecorate", 75)
    val OpVectorExtractDynamic = Code("OpVectorExtractDynamic", 77)
    val OpVectorInsertDynamic = Code("OpVectorInsertDynamic", 78)
    val OpVectorShuffle = Code("OpVectorShuffle", 79)
    val OpCompositeConstruct = Code("OpCompositeConstruct", 80)
    val OpCompositeExtract = Code("OpCompositeExtract", 81)
    val OpCompositeInsert = Code("OpCompositeInsert", 82)
    val OpCopyObject = Code("OpCopyObject", 83)
    val OpTranspose = Code("OpTranspose", 84)
    val OpSampledImage = Code("OpSampledImage", 86)
    val OpImageSampleImplicitLod = Code("OpImageSampleImplicitLod", 87)
    val OpImageSampleExplicitLod = Code("OpImageSampleExplicitLod", 88)
    val OpImageSampleDrefImplicitLod = Code("OpImageSampleDrefImplicitLod", 89)
    val OpImageSampleDrefExplicitLod = Code("OpImageSampleDrefExplicitLod", 90)
    val OpImageSampleProjImplicitLod = Code("OpImageSampleProjImplicitLod", 91)
    val OpImageSampleProjExplicitLod = Code("OpImageSampleProjExplicitLod", 92)
    val OpImageSampleProjDrefImplicitLod = Code("OpImageSampleProjDrefImplicitLod", 93)
    val OpImageSampleProjDrefExplicitLod = Code("OpImageSampleProjDrefExplicitLod", 94)
    val OpImageFetch = Code("OpImageFetch", 95)
    val OpImageGather = Code("OpImageGather", 96)
    val OpImageDrefGather = Code("OpImageDrefGather", 97)
    val OpImageRead = Code("OpImageRead", 98)
    val OpImageWrite = Code("OpImageWrite", 99)
    val OpImage = Code("OpImage", 100)
    val OpImageQueryFormat = Code("OpImageQueryFormat", 101)
    val OpImageQueryOrder = Code("OpImageQueryOrder", 102)
    val OpImageQuerySizeLod = Code("OpImageQuerySizeLod", 103)
    val OpImageQuerySize = Code("OpImageQuerySize", 104)
    val OpImageQueryLod = Code("OpImageQueryLod", 105)
    val OpImageQueryLevels = Code("OpImageQueryLevels", 106)
    val OpImageQuerySamples = Code("OpImageQuerySamples", 107)
    val OpConvertFToU = Code("OpConvertFToU", 109)
    val OpConvertFToS = Code("OpConvertFToS", 110)
    val OpConvertSToF = Code("OpConvertSToF", 111)
    val OpConvertUToF = Code("OpConvertUToF", 112)
    val OpUConvert = Code("OpUConvert", 113)
    val OpSConvert = Code("OpSConvert", 114)
    val OpFConvert = Code("OpFConvert", 115)
    val OpQuantizeToF16 = Code("OpQuantizeToF16", 116)
    val OpConvertPtrToU = Code("OpConvertPtrToU", 117)
    val OpSatConvertSToU = Code("OpSatConvertSToU", 118)
    val OpSatConvertUToS = Code("OpSatConvertUToS", 119)
    val OpConvertUToPtr = Code("OpConvertUToPtr", 120)
    val OpPtrCastToGeneric = Code("OpPtrCastToGeneric", 121)
    val OpGenericCastToPtr = Code("OpGenericCastToPtr", 122)
    val OpGenericCastToPtrExplicit = Code("OpGenericCastToPtrExplicit", 123)
    val OpBitcast = Code("OpBitcast", 124)
    val OpSNegate = Code("OpSNegate", 126)
    val OpFNegate = Code("OpFNegate", 127)
    val OpIAdd = Code("OpIAdd", 128)
    val OpFAdd = Code("OpFAdd", 129)
    val OpISub = Code("OpISub", 130)
    val OpFSub = Code("OpFSub", 131)
    val OpIMul = Code("OpIMul", 132)
    val OpFMul = Code("OpFMul", 133)
    val OpUDiv = Code("OpUDiv", 134)
    val OpSDiv = Code("OpSDiv", 135)
    val OpFDiv = Code("OpFDiv", 136)
    val OpUMod = Code("OpUMod", 137)
    val OpSRem = Code("OpSRem", 138)
    val OpSMod = Code("OpSMod", 139)
    val OpFRem = Code("OpFRem", 140)
    val OpFMod = Code("OpFMod", 141)
    val OpVectorTimesScalar = Code("OpVectorTimesScalar", 142)
    val OpMatrixTimesScalar = Code("OpMatrixTimesScalar", 143)
    val OpVectorTimesMatrix = Code("OpVectorTimesMatrix", 144)
    val OpMatrixTimesVector = Code("OpMatrixTimesVector", 145)
    val OpMatrixTimesMatrix = Code("OpMatrixTimesMatrix", 146)
    val OpOuterProduct = Code("OpOuterProduct", 147)
    val OpDot = Code("OpDot", 148)
    val OpIAddCarry = Code("OpIAddCarry", 149)
    val OpISubBorrow = Code("OpISubBorrow", 150)
    val OpUMulExtended = Code("OpUMulExtended", 151)
    val OpSMulExtended = Code("OpSMulExtended", 152)
    val OpAny = Code("OpAny", 154)
    val OpAll = Code("OpAll", 155)
    val OpIsNan = Code("OpIsNan", 156)
    val OpIsInf = Code("OpIsInf", 157)
    val OpIsFinite = Code("OpIsFinite", 158)
    val OpIsNormal = Code("OpIsNormal", 159)
    val OpSignBitSet = Code("OpSignBitSet", 160)
    val OpLessOrGreater = Code("OpLessOrGreater", 161)
    val OpOrdered = Code("OpOrdered", 162)
    val OpUnordered = Code("OpUnordered", 163)
    val OpLogicalEqual = Code("OpLogicalEqual", 164)
    val OpLogicalNotEqual = Code("OpLogicalNotEqual", 165)
    val OpLogicalOr = Code("OpLogicalOr", 166)
    val OpLogicalAnd = Code("OpLogicalAnd", 167)
    val OpLogicalNot = Code("OpLogicalNot", 168)
    val OpSelect = Code("OpSelect", 169)
    val OpIEqual = Code("OpIEqual", 170)
    val OpINotEqual = Code("OpINotEqual", 171)
    val OpUGreaterThan = Code("OpUGreaterThan", 172)
    val OpSGreaterThan = Code("OpSGreaterThan", 173)
    val OpUGreaterThanEqual = Code("OpUGreaterThanEqual", 174)
    val OpSGreaterThanEqual = Code("OpSGreaterThanEqual", 175)
    val OpULessThan = Code("OpULessThan", 176)
    val OpSLessThan = Code("OpSLessThan", 177)
    val OpULessThanEqual = Code("OpULessThanEqual", 178)
    val OpSLessThanEqual = Code("OpSLessThanEqual", 179)
    val OpFOrdEqual = Code("OpFOrdEqual", 180)
    val OpFUnordEqual = Code("OpFUnordEqual", 181)
    val OpFOrdNotEqual = Code("OpFOrdNotEqual", 182)
    val OpFUnordNotEqual = Code("OpFUnordNotEqual", 183)
    val OpFOrdLessThan = Code("OpFOrdLessThan", 184)
    val OpFUnordLessThan = Code("OpFUnordLessThan", 185)
    val OpFOrdGreaterThan = Code("OpFOrdGreaterThan", 186)
    val OpFUnordGreaterThan = Code("OpFUnordGreaterThan", 187)
    val OpFOrdLessThanEqual = Code("OpFOrdLessThanEqual", 188)
    val OpFUnordLessThanEqual = Code("OpFUnordLessThanEqual", 189)
    val OpFOrdGreaterThanEqual = Code("OpFOrdGreaterThanEqual", 190)
    val OpFUnordGreaterThanEqual = Code("OpFUnordGreaterThanEqual", 191)
    val OpShiftRightLogical = Code("OpShiftRightLogical", 194)
    val OpShiftRightArithmetic = Code("OpShiftRightArithmetic", 195)
    val OpShiftLeftLogical = Code("OpShiftLeftLogical", 196)
    val OpBitwiseOr = Code("OpBitwiseOr", 197)
    val OpBitwiseXor = Code("OpBitwiseXor", 198)
    val OpBitwiseAnd = Code("OpBitwiseAnd", 199)
    val OpNot = Code("OpNot", 200)
    val OpBitFieldInsert = Code("OpBitFieldInsert", 201)
    val OpBitFieldSExtract = Code("OpBitFieldSExtract", 202)
    val OpBitFieldUExtract = Code("OpBitFieldUExtract", 203)
    val OpBitReverse = Code("OpBitReverse", 204)
    val OpBitCount = Code("OpBitCount", 205)
    val OpDPdx = Code("OpDPdx", 207)
    val OpDPdy = Code("OpDPdy", 208)
    val OpFwidth = Code("OpFwidth", 209)
    val OpDPdxFine = Code("OpDPdxFine", 210)
    val OpDPdyFine = Code("OpDPdyFine", 211)
    val OpFwidthFine = Code("OpFwidthFine", 212)
    val OpDPdxCoarse = Code("OpDPdxCoarse", 213)
    val OpDPdyCoarse = Code("OpDPdyCoarse", 214)
    val OpFwidthCoarse = Code("OpFwidthCoarse", 215)
    val OpEmitVertex = Code("OpEmitVertex", 218)
    val OpEndPrimitive = Code("OpEndPrimitive", 219)
    val OpEmitStreamVertex = Code("OpEmitStreamVertex", 220)
    val OpEndStreamPrimitive = Code("OpEndStreamPrimitive", 221)
    val OpControlBarrier = Code("OpControlBarrier", 224)
    val OpMemoryBarrier = Code("OpMemoryBarrier", 225)
    val OpAtomicLoad = Code("OpAtomicLoad", 227)
    val OpAtomicStore = Code("OpAtomicStore", 228)
    val OpAtomicExchange = Code("OpAtomicExchange", 229)
    val OpAtomicCompareExchange = Code("OpAtomicCompareExchange", 230)
    val OpAtomicCompareExchangeWeak = Code("OpAtomicCompareExchangeWeak", 231)
    val OpAtomicIIncrement = Code("OpAtomicIIncrement", 232)
    val OpAtomicIDecrement = Code("OpAtomicIDecrement", 233)
    val OpAtomicIAdd = Code("OpAtomicIAdd", 234)
    val OpAtomicISub = Code("OpAtomicISub", 235)
    val OpAtomicSMin = Code("OpAtomicSMin", 236)
    val OpAtomicUMin = Code("OpAtomicUMin", 237)
    val OpAtomicSMax = Code("OpAtomicSMax", 238)
    val OpAtomicUMax = Code("OpAtomicUMax", 239)
    val OpAtomicAnd = Code("OpAtomicAnd", 240)
    val OpAtomicOr = Code("OpAtomicOr", 241)
    val OpAtomicXor = Code("OpAtomicXor", 242)
    val OpPhi = Code("OpPhi", 245)
    val OpLoopMerge = Code("OpLoopMerge", 246)
    val OpSelectionMerge = Code("OpSelectionMerge", 247)
    val OpLabel = Code("OpLabel", 248)
    val OpBranch = Code("OpBranch", 249)
    val OpBranchConditional = Code("OpBranchConditional", 250)
    val OpSwitch = Code("OpSwitch", 251)
    val OpKill = Code("OpKill", 252)
    val OpReturn = Code("OpReturn", 253)
    val OpReturnValue = Code("OpReturnValue", 254)
    val OpUnreachable = Code("OpUnreachable", 255)
    val OpLifetimeStart = Code("OpLifetimeStart", 256)
    val OpLifetimeStop = Code("OpLifetimeStop", 257)
    val OpGroupAsyncCopy = Code("OpGroupAsyncCopy", 259)
    val OpGroupWaitEvents = Code("OpGroupWaitEvents", 260)
    val OpGroupAll = Code("OpGroupAll", 261)
    val OpGroupAny = Code("OpGroupAny", 262)
    val OpGroupBroadcast = Code("OpGroupBroadcast", 263)
    val OpGroupIAdd = Code("OpGroupIAdd", 264)
    val OpGroupFAdd = Code("OpGroupFAdd", 265)
    val OpGroupFMin = Code("OpGroupFMin", 266)
    val OpGroupUMin = Code("OpGroupUMin", 267)
    val OpGroupSMin = Code("OpGroupSMin", 268)
    val OpGroupFMax = Code("OpGroupFMax", 269)
    val OpGroupUMax = Code("OpGroupUMax", 270)
    val OpGroupSMax = Code("OpGroupSMax", 271)
    val OpReadPipe = Code("OpReadPipe", 274)
    val OpWritePipe = Code("OpWritePipe", 275)
    val OpReservedReadPipe = Code("OpReservedReadPipe", 276)
    val OpReservedWritePipe = Code("OpReservedWritePipe", 277)
    val OpReserveReadPipePackets = Code("OpReserveReadPipePackets", 278)
    val OpReserveWritePipePackets = Code("OpReserveWritePipePackets", 279)
    val OpCommitReadPipe = Code("OpCommitReadPipe", 280)
    val OpCommitWritePipe = Code("OpCommitWritePipe", 281)
    val OpIsValidReserveId = Code("OpIsValidReserveId", 282)
    val OpGetNumPipePackets = Code("OpGetNumPipePackets", 283)
    val OpGetMaxPipePackets = Code("OpGetMaxPipePackets", 284)
    val OpGroupReserveReadPipePackets = Code("OpGroupReserveReadPipePackets", 285)
    val OpGroupReserveWritePipePackets = Code("OpGroupReserveWritePipePackets", 286)
    val OpGroupCommitReadPipe = Code("OpGroupCommitReadPipe", 287)
    val OpGroupCommitWritePipe = Code("OpGroupCommitWritePipe", 288)
    val OpEnqueueMarker = Code("OpEnqueueMarker", 291)
    val OpEnqueueKernel = Code("OpEnqueueKernel", 292)
    val OpGetKernelNDrangeSubGroupCount = Code("OpGetKernelNDrangeSubGroupCount", 293)
    val OpGetKernelNDrangeMaxSubGroupSize = Code("OpGetKernelNDrangeMaxSubGroupSize", 294)
    val OpGetKernelWorkGroupSize = Code("OpGetKernelWorkGroupSize", 295)
    val OpGetKernelPreferredWorkGroupSizeMultiple = Code("OpGetKernelPreferredWorkGroupSizeMultiple", 296)
    val OpRetainEvent = Code("OpRetainEvent", 297)
    val OpReleaseEvent = Code("OpReleaseEvent", 298)
    val OpCreateUserEvent = Code("OpCreateUserEvent", 299)
    val OpIsValidEvent = Code("OpIsValidEvent", 300)
    val OpSetUserEventStatus = Code("OpSetUserEventStatus", 301)
    val OpCaptureEventProfilingInfo = Code("OpCaptureEventProfilingInfo", 302)
    val OpGetDefaultQueue = Code("OpGetDefaultQueue", 303)
    val OpBuildNDRange = Code("OpBuildNDRange", 304)
    val OpImageSparseSampleImplicitLod = Code("OpImageSparseSampleImplicitLod", 305)
    val OpImageSparseSampleExplicitLod = Code("OpImageSparseSampleExplicitLod", 306)
    val OpImageSparseSampleDrefImplicitLod = Code("OpImageSparseSampleDrefImplicitLod", 307)
    val OpImageSparseSampleDrefExplicitLod = Code("OpImageSparseSampleDrefExplicitLod", 308)
    val OpImageSparseSampleProjImplicitLod = Code("OpImageSparseSampleProjImplicitLod", 309)
    val OpImageSparseSampleProjExplicitLod = Code("OpImageSparseSampleProjExplicitLod", 310)
    val OpImageSparseSampleProjDrefImplicitLod = Code("OpImageSparseSampleProjDrefImplicitLod", 311)
    val OpImageSparseSampleProjDrefExplicitLod = Code("OpImageSparseSampleProjDrefExplicitLod", 312)
    val OpImageSparseFetch = Code("OpImageSparseFetch", 313)
    val OpImageSparseGather = Code("OpImageSparseGather", 314)
    val OpImageSparseDrefGather = Code("OpImageSparseDrefGather", 315)
    val OpImageSparseTexelsResident = Code("OpImageSparseTexelsResident", 316)
    val OpNoLine = Code("OpNoLine", 317)
    val OpAtomicFlagTestAndSet = Code("OpAtomicFlagTestAndSet", 318)
    val OpAtomicFlagClear = Code("OpAtomicFlagClear", 319)
    val OpImageSparseRead = Code("OpImageSparseRead", 320)
    val OpSizeOf = Code("OpSizeOf", 321)
    val OpTypePipeStorage = Code("OpTypePipeStorage", 322)
    val OpConstantPipeStorage = Code("OpConstantPipeStorage", 323)
    val OpCreatePipeFromPipeStorage = Code("OpCreatePipeFromPipeStorage", 324)
    val OpGetKernelLocalSizeForSubgroupCount = Code("OpGetKernelLocalSizeForSubgroupCount", 325)
    val OpGetKernelMaxNumSubgroups = Code("OpGetKernelMaxNumSubgroups", 326)
    val OpTypeNamedBarrier = Code("OpTypeNamedBarrier", 327)
    val OpNamedBarrierInitialize = Code("OpNamedBarrierInitialize", 328)
    val OpMemoryNamedBarrier = Code("OpMemoryNamedBarrier", 329)
    val OpModuleProcessed = Code("OpModuleProcessed", 330)
    val OpSubgroupBallotKHR = Code("OpSubgroupBallotKHR", 4421)
    val OpSubgroupFirstInvocationKHR = Code("OpSubgroupFirstInvocationKHR", 4422)
    val OpSubgroupAllKHR = Code("OpSubgroupAllKHR", 4428)
    val OpSubgroupAnyKHR = Code("OpSubgroupAnyKHR", 4429)
    val OpSubgroupAllEqualKHR = Code("OpSubgroupAllEqualKHR", 4430)
    val OpSubgroupReadInvocationKHR = Code("OpSubgroupReadInvocationKHR", 4432)
    val OpGroupIAddNonUniformAMD = Code("OpGroupIAddNonUniformAMD", 5000)
    val OpGroupFAddNonUniformAMD = Code("OpGroupFAddNonUniformAMD", 5001)
    val OpGroupFMinNonUniformAMD = Code("OpGroupFMinNonUniformAMD", 5002)
    val OpGroupUMinNonUniformAMD = Code("OpGroupUMinNonUniformAMD", 5003)
    val OpGroupSMinNonUniformAMD = Code("OpGroupSMinNonUniformAMD", 5004)
    val OpGroupFMaxNonUniformAMD = Code("OpGroupFMaxNonUniformAMD", 5005)
    val OpGroupUMaxNonUniformAMD = Code("OpGroupUMaxNonUniformAMD", 5006)
    val OpGroupSMaxNonUniformAMD = Code("OpGroupSMaxNonUniformAMD", 5007)
    val OpFragmentMaskFetchAMD = Code("OpFragmentMaskFetchAMD", 5011)
    val OpFragmentFetchAMD = Code("OpFragmentFetchAMD", 5012)
    val OpSubgroupShuffleINTEL = Code("OpSubgroupShuffleINTEL", 5571)
    val OpSubgroupShuffleDownINTEL = Code("OpSubgroupShuffleDownINTEL", 5572)
    val OpSubgroupShuffleUpINTEL = Code("OpSubgroupShuffleUpINTEL", 5573)
    val OpSubgroupShuffleXorINTEL = Code("OpSubgroupShuffleXorINTEL", 5574)
    val OpSubgroupBlockReadINTEL = Code("OpSubgroupBlockReadINTEL", 5575)
    val OpSubgroupBlockWriteINTEL = Code("OpSubgroupBlockWriteINTEL", 5576)
    val OpSubgroupImageBlockReadINTEL = Code("OpSubgroupImageBlockReadINTEL", 5577)
    val OpSubgroupImageBlockWriteINTEL = Code("OpSubgroupImageBlockWriteINTEL", 5578)
  }

}
