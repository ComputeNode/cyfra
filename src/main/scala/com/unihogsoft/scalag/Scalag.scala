/*
 * This Scala source file was generated by the Gradle 'init' task.
 */
package com.unihogsoft.scalag

import java.nio._

import com.unihogsoft.scalag.cl.{BufferUtilsExt, InitCL}
import org.lwjgl._
import org.lwjgl.opencl._
import CL10._
import java.nio.FloatBuffer
import com.unihogsoft.scalag.cl.InfoUtil._

object Scalag extends App {
  val source =  "kernel void sum(global const float *a, global const float *b, global float *answer) { " +
                "  unsigned int xid = get_global_id(0); " +
                "  answer[xid] = a[xid] + b[xid];" +
                "}"

  val a: FloatBuffer = BufferUtilsExt.toFloatBuffer(Array[Float](1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
  val b: FloatBuffer = BufferUtilsExt.toFloatBuffer(Array[Float](9, 8, 7, 6, 5, 4, 3, 2, 1, 0))
  val answer = BufferUtils.createFloatBuffer(a.capacity)

  val ctx = InitCL.initCL()
  val queue: Long = clCreateCommandQueue(ctx.getContext, ctx.getDevice, CL_QUEUE_PROFILING_ENABLE, null.asInstanceOf[IntBuffer]);
  val aMem: Long = clCreateBuffer(ctx.getContext, CL_MEM_READ_ONLY | CL_MEM_COPY_HOST_PTR, a, null)
  clEnqueueWriteBuffer(queue, aMem, true, 0, a, null, null)
  val bMem: Long = clCreateBuffer(ctx.getContext, CL_MEM_READ_ONLY | CL_MEM_COPY_HOST_PTR, b, null)
  clEnqueueWriteBuffer(queue, bMem, true, 0, b, null, null)
  val answerMem: Long = clCreateBuffer(ctx.getContext, CL_MEM_WRITE_ONLY | CL_MEM_COPY_HOST_PTR, answer, null)
  clFinish(queue)

  val program = clCreateProgramWithSource(ctx.getContext, source, null)
  checkCLError(clBuildProgram(program, ctx.getDevice, "", null, 0L))
  val kernel = clCreateKernel(program, "sum", null.asInstanceOf[IntBuffer])
  val kernel1DGlobalWorkSize = BufferUtils.createPointerBuffer(1)
  kernel1DGlobalWorkSize.put(0, a.capacity)
  clSetKernelArg1p(kernel, 0, aMem)
  clSetKernelArg1p(kernel, 1, bMem)
  clSetKernelArg1p(kernel, 2, answerMem)
  clEnqueueNDRangeKernel(queue, kernel, 1, null, kernel1DGlobalWorkSize, null, null, null)
  clEnqueueReadBuffer(queue, answerMem, true, 0, answer, null, null)
  clFinish(queue)

  BufferUtilsExt.printFloatBuffer(a)
  println("+")
  BufferUtilsExt.printFloatBuffer(b)
  println("=")
  BufferUtilsExt.printFloatBuffer(answer)
}